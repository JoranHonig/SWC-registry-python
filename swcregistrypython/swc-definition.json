{
    "SWC-100": {
      "markdown": "# Title \nFunction Default Visibility\n\n## Relationships \n[CWE-710: Improper Adherence to Coding Standards](https://cwe.mitre.org/data/definitions/710.html)\n\n## Description \n\nFunctions that do not have a function visibility type specified are `public` by default. This can lead to a vulnerability if a developer forgot to set the visibility and a malicious user is able to make unauthorized or unintended state changes.     \n\n## Remediation\n\nFunctions can be specified as being `external`, `public`, `internal` or `private`. It is recommended to make a conscious decision on which visibility type is appropriate for a function. This can dramatically reduce the attack surface of a contract system. \n\n## References \n- [Ethereum Smart Contract Best Practices - Explicitly mark visibility in functions and state variables](https://consensys.github.io/smart-contract-best-practices/recommendations/#explicitly-mark-visibility-in-functions-and-state-variables)\n- [SigmaPrime - Visibility](https://github.com/sigp/solidity-security-blog#visibility)\n\n",
      "content": {
        "Title": "Function Default Visibility",
        "Relationships": "[CWE-710: Improper Adherence to Coding Standards](https://cwe.mitre.org/data/definitions/710.html)",
        "Description": "Functions that do not have a function visibility type specified are `public` by default. This can lead to a vulnerability if a developer forgot to set the visibility and a malicious user is able to make unauthorized or unintended state changes.",
        "Remediation": "Functions can be specified as being `external`, `public`, `internal` or `private`. It is recommended to make a conscious decision on which visibility type is appropriate for a function. This can dramatically reduce the attack surface of a contract system."
      }
    },
    "SWC-101": {
      "markdown": "# Title \nInteger Overflow and Underflow\n\n## Relationships\n[CWE-682: Incorrect Calculation](https://cwe.mitre.org/data/definitions/682.html) \n\n## Description \n\nAn overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits – either larger than the maximum or lower than the minimum representable value.\n\n## Remediation\n\nIt is recommended to use vetted safe math libraries for arithmetic operations consistently throughout the smart contract system.\n\n## References \n- [Ethereum Smart Contract Best Practices - Integer Overflow and Underflow](https://consensys.github.io/smart-contract-best-practices/known_attacks/#integer-overflow-and-underflow)\n",
      "content": {
        "Title": "Integer Overflow and Underflow",
        "Relationships": "[CWE-682: Incorrect Calculation](https://cwe.mitre.org/data/definitions/682.html)",
        "Description": "An overflow/underflow happens when an arithmetic operation reaches the maximum or minimum size of a type. For instance if a number is stored in the uint8 type, it means that the number is stored in a 8 bits unsigned number ranging from 0 to 2^8-1. In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of bits – either larger than the maximum or lower than the minimum representable value.",
        "Remediation": "It is recommended to use vetted safe math libraries for arithmetic operations consistently throughout the smart contract system."
      }
    },
    "SWC-102": {
      "markdown": "# Title \nOutdated Compiler Version\n\n## Relationships\n[CWE-937: Using Components with Known Vulnerabilities](http://cwe.mitre.org/data/definitions/937.html)\n\n## Description \n\nUsing an outdated compiler version can be problematic especially if there are publicly disclosed bugs and issues that affect the current compiler version.\n\n## Remediation\n\nIt is recommended to use a recent version of the Solidity compiler.  \n\n## References \n- [Solidity Release Notes](https://github.com/ethereum/solidity/releases)\n- [Etherscan Solidity Bug Info](https://etherscan.io/solcbuginfo)\n",
      "content": {
        "Title": "Outdated Compiler Version",
        "Relationships": "[CWE-937: Using Components with Known Vulnerabilities](http://cwe.mitre.org/data/definitions/937.html)",
        "Description": "Using an outdated compiler version can be problematic especially if there are publicly disclosed bugs and issues that affect the current compiler version.",
        "Remediation": "It is recommended to use a recent version of the Solidity compiler."
      }
    }
}